Getting started with Room
dependencies { 
   def room_version = "2.4.3"  
  implementation "androidx.room:room-runtime:$room_version"   
 annotationProcessor "androidx.room:room-compiler:$room_version" 
   // optional - Kotlin Extensions and Coroutines support for Room 
   implementation "androidx.room:room-ktx:$room_version"   
 // To support LiveData in Compose   
 implementation 'androidx.compose.runtime:runtime-livedata:1.3.2'
}


The RoomDatabase class will define the structure of the database, as well as provide methods for accessing and modifying the data. 

@Database(entities = [User::class], version = 1, exportSchema = false)abstract class AppDatabase : RoomDatabase() {    
abstract fun userDao(): UserDao     
companion object {        
@Volatile       
 private var INSTANCE: AppDatabase? = null        
 fun getDatabase(context: Context): AppDatabase {       
     val tempInstance = INSTANCE           
 if (tempInstance != null) 
{               
 return tempInstance   
         }           
  synchronized(this) {   
            val instance =Room.databaseBuilder(                
    context.applicationContext,                   
 AppDatabase::class.java,                    "app_database"             
   ).build()                
INSTANCE = instance  
              return instance          
  }       
 }   
 }
}

The automatic migration provided by Room suffices, and can be used as follows:

@Database(   
version = 2, 
  entities = [User::class],  
 autoMigrations = [     AutoMigration (from = 1, to = 2)
   ] 
) 

This defines the structure of the data that will be stored in the database. In this case, we will create a User entity.

@Entity(tableName = "user_table")
 data class User (
 @PrimaryKey(autoGenerate = true)
 var id: Int,
 var name: String 
)

 This is the class that will provide methods for accessing and modifying the data in the database.

@Dao 
interface UserDao { 
@Insert
 fun insert(user: User)
 @Query("SELECT * FROM user_table")
 fun getAll(): LiveData<List<User>>
 }

When using @Query, the developer can use variables, too. For example:
@Query("SELECT * FROM user_table WHERE name = :name") 
fun getAllUsersWithName(name: String): Array<User> 





